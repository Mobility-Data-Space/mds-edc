openapi: 3.0.1
info:
  description: merged spec
  title: merged spec
  version: 1.0.0
servers:
- url: http://localhost:8080
paths:
  /v3/assets/request:
    post:
      description: Request all assets according to a particular query
      operationId: requestAssetsV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AssetOutput"
                type: array
          description: The assets matching the query
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: Request body was malformed
      tags:
      - Asset V3
  /check/health:
    get:
      description: Performs a liveness probe to determine whether the runtime is working
        properly.
      operationId: checkHealth
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
          description: The runtime is working properly.
      tags:
      - Application Observability
  /v3/transferprocesses/{id}/state:
    $ref: "./transfer-process-api.yaml#/paths/~1v3~1transferprocesses~1{id}~1state"
  /v3/assets/{id}:
    delete:
      description: "Removes an asset with the given ID if possible. Deleting an asset\
        \ is only possible if that asset is not yet referenced by a contract agreement,\
        \ in which case an error is returned. DANGER ZONE: Note that deleting assets\
        \ can have unexpected results, especially for contract offers that have been\
        \ sent out or ongoing or contract negotiations."
      operationId: removeAssetV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Asset was deleted successfully
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: An asset with the given ID does not exist
        "409":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: "The asset cannot be deleted, because it is referenced by a\
            \ contract agreement"
      tags:
      - Asset V3
    get:
      description: Gets an asset with the given ID
      operationId: getAssetV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetOutput"
          description: The asset
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: An asset with the given ID does not exist
      tags:
      - Asset V3
  /v3/contractnegotiations/{id}/reject:
    post:
      description: Reject a pending negotiation
      operationId: rejectNegotiation
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Manual Negotiation Approval
  /check/liveness:
    get:
      description: Performs a liveness probe to determine whether the runtime is working
        properly.
      operationId: getLiveness
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
          description: The runtime is working properly.
      tags:
      - Application Observability
  /check/readiness:
    get:
      description: Performs a readiness probe to determine whether the runtime is
        able to accept requests.
      operationId: getReadiness
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
          description: The runtime is able to accept requests.
      tags:
      - Application Observability
  /v3/contractagreements/request:
    $ref: ./contract-agreement-api.yaml#/paths/~1v3~1contractagreements~1request
  /v4alpha/contractagreements/request:
    $ref: ./contract-agreement-api.yaml#/paths/~1v4alpha~1contractagreements~1request
  /v3/policydefinitions/{id}:
    delete:
      description: "Removes a policy definition with the given ID if possible. Deleting\
        \ a policy definition is only possible if that policy definition is not yet\
        \ referenced by a contract definition, in which case an error is returned.\
        \ DANGER ZONE: Note that deleting policy definitions can have unexpected results,\
        \ do this at your own risk!"
      operationId: deletePolicyDefinitionV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Policy definition was deleted successfully
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: An policy definition with the given ID does not exist
        "409":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: "The policy definition cannot be deleted, because it is referenced\
            \ by a contract definition"
      tags:
      - Policy Definition v3
    get:
      description: Gets a policy definition with the given ID
      operationId: getPolicyDefinitionV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyDefinitionOutput"
          description: The  policy definition
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: An  policy definition with the given ID does not exist
      tags:
      - Policy Definition v3
    put:
      description: "Updates an existing Policy, If the Policy is not found, an error\
        \ is reported"
      operationId: updatePolicyDefinitionV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyDefinitionInput"
      responses:
        "204":
          description: policy definition was updated successfully.
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: Request body was malformed
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDetail"
          description: "policy definition could not be updated, because it does not\
            \ exists"
      tags:
      - Policy Definition v3
  /v3/catalog/request:
    $ref: ./catalog-api.yaml#/paths/~1v3~1catalog~1request
  /v3/contractnegotiations/{id}/agreement:
    $ref: "./contract-negotiation-api.yaml#/paths/~1v3~1contractnegotiations~1{id}~1agreement"
  /v3/edrs/request:
    $ref: ./edr-cache-api.yaml#/paths/~1v3~1edrs~1request
  /v3/transferprocesses/{id}/terminate:
    $ref: "./transfer-process-api.yaml#/paths/~1v3~1transferprocesses~1{id}~1terminate"
  /v3/contractnegotiations:
    $ref: ./contract-negotiation-api.yaml#/paths/~1v3~1contractnegotiations
  /v3/contractagreements/{id}:
    $ref: "./contract-agreement-api.yaml#/paths/~1v3~1contractagreements~1{id}"
  /v3/contractnegotiations/request:
    $ref: ./contract-negotiation-api.yaml#/paths/~1v3~1contractnegotiations~1request
  /v3/edrs/{transferProcessId}/dataaddress:
    $ref: "./edr-cache-api.yaml#/paths/~1v3~1edrs~1{transferProcessId}~1dataaddress"
  /v3/contractdefinitions/request:
    post:
      description: Returns all contract definitions according to a query
      operationId: queryContractDefinitionsV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ContractDefinitionOutput"
                type: array
          description: The contract definitions matching the query
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: Request was malformed
      tags:
      - Contract Definition V3
  /v3/policydefinitions/{id}/evaluationplan:
    post:
      description: "Creates an execution plane for an existing Policy, If the Policy\
        \ is not found, an error is reported"
      operationId: createExecutionPlaneV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyEvaluationPlanRequestSchema"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyEvaluationPlanSchema"
          description: Returns the evaluation plan
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDetail"
          description: "An evaluation plan could not be created, because the policy\
            \ definition does not exists"
      tags:
      - Policy Definition v3
  /v4alpha/contractagreements/{id}/negotiation:
    $ref: "./contract-agreement-api.yaml#/paths/~1v4alpha~1contractagreements~1{id}~1negotiation"
  /v3/contractnegotiations/{id}/terminate:
    $ref: "./contract-negotiation-api.yaml#/paths/~1v3~1contractnegotiations~1{id}~1terminate"
  /v3/transferprocesses/{id}/deprovision:
    $ref: "./transfer-process-api.yaml#/paths/~1v3~1transferprocesses~1{id}~1deprovision"
  /{any}:
    $ref: "./data-plane-public-api-v2.yaml#/paths/~1{any}"
  /v3/dataplanes:
    $ref: ./data-plane-selector-api.yaml#/paths/~1v3~1dataplanes
  /v3/catalog/dataset/request:
    $ref: ./catalog-api.yaml#/paths/~1v3~1catalog~1dataset~1request
  /v3/transferprocesses/request:
    $ref: ./transfer-process-api.yaml#/paths/~1v3~1transferprocesses~1request
  /v3/transferprocesses/{id}/suspend:
    $ref: "./transfer-process-api.yaml#/paths/~1v3~1transferprocesses~1{id}~1suspend"
  /v3/transferprocesses/{id}:
    $ref: "./transfer-process-api.yaml#/paths/~1v3~1transferprocesses~1{id}"
  /v4alpha/contractagreements/{id}:
    $ref: "./contract-agreement-api.yaml#/paths/~1v4alpha~1contractagreements~1{id}"
  /v3/contractnegotiations/{id}/approve:
    post:
      description: Approve a pending negotiation
      operationId: approveNegotiation
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Manual Negotiation Approval
  /v3/contractdefinitions:
    post:
      description: Creates a new contract definition
      operationId: createContractDefinitionV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContractDefinitionInput"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: contract definition was created successfully. Returns the Contract
            Definition Id and created timestamp
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: "Could not create contract definition, because a contract definition\
            \ with that ID already exists"
      tags:
      - Contract Definition V3
    put:
      description: Updated a contract definition with the given ID. The supplied JSON
        structure must be a valid JSON-LD object
      operationId: updateContractDefinitionV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContractDefinitionInput"
      responses:
        "204":
          description: Contract definition was updated successfully
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: A contract definition with the given ID does not exist
      tags:
      - Contract Definition V3
  /v3/contractdefinitions/{id}:
    delete:
      description: "Removes a contract definition with the given ID if possible. DANGER\
        \ ZONE: Note that deleting contract definitions can have unexpected results,\
        \ especially for contract offers that have been sent out or ongoing or contract\
        \ negotiations."
      operationId: deleteContractDefinitionV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Contract definition was deleted successfully
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: A contract definition with the given ID does not exist
      tags:
      - Contract Definition V3
    get:
      description: Gets an contract definition with the given ID
      operationId: getContractDefinitionV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractDefinitionOutput"
          description: The contract definition
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: "Request was malformed, e.g. id was null"
        "404":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: An contract agreement with the given ID does not exist
      tags:
      - Contract Definition V3
  /v3/edrs/{transferProcessId}:
    $ref: "./edr-cache-api.yaml#/paths/~1v3~1edrs~1{transferProcessId}"
  /v3/policydefinitions/request:
    post:
      description: Returns all policy definitions according to a query
      operationId: queryPolicyDefinitionsV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuerySpec"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PolicyDefinitionOutput"
                type: array
          description: The policy definitions matching the query
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: Request was malformed
      tags:
      - Policy Definition v3
  /v3/transferprocesses/{id}/resume:
    $ref: "./transfer-process-api.yaml#/paths/~1v3~1transferprocesses~1{id}~1resume"
  /v3/policydefinitions:
    post:
      description: Creates a new policy definition
      operationId: createPolicyDefinitionV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyDefinitionInput"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: policy definition was created successfully. Returns the Policy
            Definition Id and created timestamp
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: "Could not create policy definition, because a contract definition\
            \ with that ID already exists"
      tags:
      - Policy Definition v3
  /check/startup:
    get:
      description: Performs a startup probe to determine whether the runtime has completed
        startup.
      operationId: getStartup
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
          description: The runtime has completed startup.
      tags:
      - Application Observability
  /v4alpha/protocol-versions/request:
    $ref: ./protocol-version-api.yaml#/paths/~1v4alpha~1protocol-versions~1request
  /v3/contractagreements/{id}/negotiation:
    $ref: "./contract-agreement-api.yaml#/paths/~1v3~1contractagreements~1{id}~1negotiation"
  /v3/policydefinitions/{id}/validate:
    post:
      description: "Validates an existing Policy, If the Policy is not found, an error\
        \ is reported"
      operationId: validatePolicyDefinitionV3
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyValidationResultSchema"
          description: Returns the validation result
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDetail"
          description: "policy definition could not be validated, because it does\
            \ not exists"
      tags:
      - Policy Definition v3
  /v4alpha/dataplanes:
    $ref: ./data-plane-selector-api.yaml#/paths/~1v4alpha~1dataplanes
  /v3/transferprocesses:
    $ref: ./transfer-process-api.yaml#/paths/~1v3~1transferprocesses
  /v3/contractnegotiations/{id}:
    $ref: "./contract-negotiation-api.yaml#/paths/~1v3~1contractnegotiations~1{id}"
  /v3/contractnegotiations/{id}/state:
    $ref: "./contract-negotiation-api.yaml#/paths/~1v3~1contractnegotiations~1{id}~1state"
  /v3/assets:
    post:
      description: Creates a new asset together with a data address
      operationId: createAssetV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetInput"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
          description: Asset was created successfully. Returns the asset Id and created
            timestamp
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: Request body was malformed
        "409":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: "Could not create asset, because an asset with that ID already\
            \ exists"
      tags:
      - Asset V3
    put:
      description: "Updates an asset with the given ID if it exists. If the asset\
        \ is not found, no further action is taken. DANGER ZONE: Note that updating\
        \ assets can have unexpected results, especially for contract offers that\
        \ have been sent out or are ongoing in contract negotiations."
      operationId: updateAssetV3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetInput"
      responses:
        "204":
          description: Asset was updated successfully
        "400":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApiErrorDetail"
                type: array
          description: "Request was malformed, e.g. id was null"
        "404":
          description: "Asset could not be updated, because it does not exist."
      tags:
      - Asset V3
components:
  schemas:
    AssetOutput:
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': asset-id
        properties:
          key: value
        privateProperties:
          privateKey: privateValue
        dataAddress:
          type: HttpData
          baseUrl: https://jsonplaceholder.typicode.com/todos
        createdAt: 1688465655
      properties:
        '@id':
          type: string
        '@type':
          example: https://w3id.org/edc/v0.0.1/ns/Asset
          type: string
        createdAt:
          format: int64
          type: integer
        dataAddress:
          $ref: "#/components/schemas/DataAddress"
        privateProperties:
          type: object
        properties:
          type: object
      type: object
    DataAddress:
      properties:
        '@type':
          example: https://w3id.org/edc/v0.0.1/ns/DataAddress
          type: string
        type:
          type: string
      type: object
    Properties:
      type: object
    ApiErrorDetail:
      example:
        message: error message
        type: ErrorType
        path: object.error.path
        invalidValue: this value is not valid
      properties:
        invalidValue:
          type: string
        message:
          type: string
        path:
          type: string
        type:
          type: string
      type: object
    QuerySpec:
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': QuerySpec
        offset: 5
        limit: 10
        sortOrder: DESC
        sortField: fieldName
        filterExpression: []
      properties:
        '@type':
          example: https://w3id.org/edc/v0.0.1/ns/QuerySpec
          type: string
        filterExpression:
          items:
            $ref: "#/components/schemas/Criterion"
          type: array
        limit:
          format: int32
          type: integer
        offset:
          format: int32
          type: integer
        sortField:
          type: string
        sortOrder:
          enum:
          - ASC
          - DESC
          type: string
      type: object
    Criterion:
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': Criterion
        operandLeft: fieldName
        operator: =
        operandRight: some value
      properties:
        '@type':
          example: https://w3id.org/edc/v0.0.1/ns/Criterion
          type: string
        operandLeft:
          type: object
        operandRight:
          type: object
        operator:
          type: string
      required:
      - operandLeft
      - operandRight
      - operator
      type: object
    HealthStatus:
      example:
        isSystemHealthy: true
        componentResults:
        - component: component
          failure:
            failureDetail: failureDetail
            messages:
            - messages
            - messages
          isHealthy: true
        - component: component
          failure:
            failureDetail: failureDetail
            messages:
            - messages
            - messages
          isHealthy: true
      properties:
        componentResults:
          items:
            $ref: "#/components/schemas/HealthCheckResult"
          type: array
        isSystemHealthy:
          type: boolean
      type: object
    HealthCheckResult:
      example:
        component: component
        failure:
          failureDetail: failureDetail
          messages:
          - messages
          - messages
        isHealthy: true
      properties:
        component:
          type: string
        failure:
          $ref: "#/components/schemas/Failure"
        isHealthy:
          type: boolean
      type: object
    Failure:
      example:
        failureDetail: failureDetail
        messages:
        - messages
        - messages
      properties:
        failureDetail:
          type: string
        messages:
          items:
            type: string
          type: array
      type: object
    PolicyDefinitionOutput:
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': definition-id
        policy:
          '@context': http://www.w3.org/ns/odrl.jsonld
          '@type': Set
          uid: http://example.com/policy:1010
          permission:
          - target: http://example.com/asset:9898.movie
            action: display
            constraint:
            - leftOperand: spatial
              operator: eq
              rightOperand: https://www.wikidata.org/wiki/Q183
              comment: i.e Germany
        createdAt: 1688465655
      properties:
        '@id':
          type: string
        '@type':
          example: https://w3id.org/edc/v0.0.1/ns/PolicyDefinition
          type: string
        policy:
          description: ODRL policy
          example:
            '@context': http://www.w3.org/ns/odrl.jsonld
            '@id': 0949ba30-680c-44e6-bc7d-1688cbe1847e
            '@type': odrl:Set
            permission:
              target: http://example.com/asset:9898.movie
              action:
                type: http://www.w3.org/ns/odrl/2/use
              constraint:
                leftOperand: https://w3id.org/edc/v0.0.1/ns/left
                operator: eq
                rightOperand: value
            prohibition: []
            obligation: []
          type: object
      type: object
    Policy:
      description: ODRL policy
      example:
        '@context': http://www.w3.org/ns/odrl.jsonld
        '@id': 0949ba30-680c-44e6-bc7d-1688cbe1847e
        '@type': odrl:Set
        permission:
          target: http://example.com/asset:9898.movie
          action:
            type: http://www.w3.org/ns/odrl/2/use
          constraint:
            leftOperand: https://w3id.org/edc/v0.0.1/ns/left
            operator: eq
            rightOperand: value
        prohibition: []
        obligation: []
      type: object
    PolicyDefinitionInput:
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': definition-id
        policy:
          '@context': http://www.w3.org/ns/odrl.jsonld
          '@type': Set
          uid: http://example.com/policy:1010
          profile: http://example.com/odrl:profile:02
          permission:
          - target: http://example.com/asset:9898.movie
            action: display
            constraint:
            - leftOperand: spatial
              operator: eq
              rightOperand: https://www.wikidata.org/wiki/Q183
              comment: i.e Germany
      properties:
        '@context':
          type: object
        '@id':
          type: string
        '@type':
          example: https://w3id.org/edc/v0.0.1/ns/PolicyDefinition
          type: string
        policy:
          description: ODRL policy
          example:
            '@context': http://www.w3.org/ns/odrl.jsonld
            '@id': 0949ba30-680c-44e6-bc7d-1688cbe1847e
            '@type': odrl:Set
            permission:
              target: http://example.com/asset:9898.movie
              action:
                type: http://www.w3.org/ns/odrl/2/use
              constraint:
                leftOperand: https://w3id.org/edc/v0.0.1/ns/left
                operator: eq
                rightOperand: value
            prohibition: []
            obligation: []
          type: object
      required:
      - '@context'
      - policy
      type: object
    ContractDefinitionOutput:
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': definition-id
        accessPolicyId: asset-policy-id
        contractPolicyId: contract-policy-id
        assetsSelector: []
        createdAt: 1688465655
      properties:
        '@id':
          type: string
        '@type':
          example: https://w3id.org/edc/v0.0.1/ns/ContractDefinition
          type: string
        accessPolicyId:
          type: string
        assetsSelector:
          items:
            $ref: "#/components/schemas/Criterion"
          type: array
        contractPolicyId:
          type: string
        createdAt:
          format: int64
          type: integer
      type: object
    PolicyEvaluationPlanSchema:
      example:
        '@type': PolicyEvaluationPlan
        preValidators: DcpScopeExtractorFunction
        permissionSteps:
          '@type': PermissionStep
          isFiltered: false
          filteringReasons: []
          ruleFunctions: []
          constraintSteps:
            '@type': AtomicConstraintStep
            isFiltered: true
            filteringReasons:
            - leftOperand 'MembershipCredential' is not bound to scope 'request.catalog'
            - leftOperand 'MembershipCredential' is not bound to any function within
              scope 'request.catalog'
            functionParams:
            - '''MembershipCredential'''
            - EQ
            - '''active'''
          dutySteps: []
        prohibitionSteps: []
        obligationSteps: []
        postValidators: DefaultScopeMappingFunction
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
          edc: https://w3id.org/edc/v0.0.1/ns/
          odrl: http://www.w3.org/ns/odrl/2/
      type: object
    PolicyEvaluationPlanRequestSchema:
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': PolicyEvaluationPlanRequest
        policyScope: catalog
      properties:
        policyScope:
          type: string
      type: object
    ContractDefinitionInput:
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': definition-id
        accessPolicyId: asset-policy-id
        contractPolicyId: contract-policy-id
        assetsSelector: []
      properties:
        '@context':
          type: object
        '@id':
          type: string
        '@type':
          example: https://w3id.org/edc/v0.0.1/ns/ContractDefinition
          type: string
        accessPolicyId:
          type: string
        assetsSelector:
          items:
            $ref: "#/components/schemas/Criterion"
          type: array
        contractPolicyId:
          type: string
      required:
      - '@context'
      - accessPolicyId
      - assetsSelector
      - contractPolicyId
      type: object
    IdResponse:
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': id-value
        createdAt: 1688465655
      properties:
        '@id':
          type: string
        createdAt:
          format: int64
          type: integer
      type: object
    PolicyValidationResultSchema:
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@type': PolicyValidationResult
        isValid: false
        errors:
        - error1
        - error2
      properties:
        errors:
          items:
            type: string
          type: array
        isValid:
          type: boolean
      type: object
    AssetInput:
      example:
        '@context':
          '@vocab': https://w3id.org/edc/v0.0.1/ns/
        '@id': asset-id
        properties:
          key: value
        privateProperties:
          privateKey: privateValue
        dataAddress:
          type: HttpData
          baseUrl: https://jsonplaceholder.typicode.com/todos
      properties:
        '@context':
          type: object
        '@id':
          type: string
        '@type':
          example: https://w3id.org/edc/v0.0.1/ns/Asset
          type: string
        dataAddress:
          $ref: "#/components/schemas/DataAddress"
        privateProperties:
          type: object
        properties:
          type: object
      required:
      - '@context'
      - dataAddress
      - properties
      type: object
